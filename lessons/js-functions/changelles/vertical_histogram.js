/* eslint-disable no-unused-expressions */
// sc: https://ru.hexlet.io/challenges/js_functions_vertical_histogram/instance

// Игральная кость — шестигранный кубик, который бросается несколько раз. Гистограмма —
// это графическое представление данных в виде столбцов или колонок.

//     histogram.js

// Реализуйте и экспортируйте по умолчанию функцию, которая выводит на экран вертикальную
// гистограмму. Функция принимает на вход количество бросков кубика и функцию, которая
// имитирует бросок игральной кости (её реализовывать не нужно). Вызов этой функции
// генерирует значение от 1 до 6, что соответствует одной из граней игральной кости.

// Гистограмма содержит столбцы, каждой из которых соответствует грань игральной кости и
// количество выпадений этой грани. Результаты отображаются графически (с помощью символов
// #) и в виде процентного значения от общего количества бросков, за исключением случаев,
// когда количество равно 0 (нулю).

// Дополнительные условия:

// Строки не должны содержать лишние пробелы справа.
// Процентные значения должны быть прижаты влево относительно столбца.
// Значения сторон игральной кости должны быть посредине столбца.
// Столбцы между собой разделены пробелом
// Количество секций в столбце (высота столбца) должно соответствовать количеству
// выпадений каждой из сторон игральной кости.

// Подсказки:
// Гистограмма  https://ru.wikipedia.org/wiki/Гистограмма
// Для решения задачи активно используйте функции из библиотеки lodash.
// При получении процентного значения используйте стандартные правила округления числа.

const _ = require('lodash');

const randomInt = (min, max) => Math.floor(min + Math.random() * (max + 1 - min));
const getRoll = () => randomInt(1, 6);

const play = (rollsCount, rollDie) => {
    const rolls = _.times(rollsCount, rollDie);
    const digitsCount = {
        ...{ 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0 },
        ..._.countBy(rolls),
    };

    const rows = Object.entries(digitsCount).map(([digit, count]) => {
        const row = `---\n ${digit} `;
        const percent = `${Math.round((count / rollsCount) * 100)}%`.padEnd(3, ' ');
        return count === 0 ? row : `${percent}\n${'###\n'.repeat(count)}${row}`;
    });

    return rows;
};
console.log(play(32, getRoll));

`
                28%
                ###
                ###
        19%     ###
        ### 16% ### 16%
13%     ### ### ### ###
### 9%  ### ### ### ###
### ### ### ### ### ###
### ### ### ### ### ###
### ### ### ### ### ###
-----------------------
 1   2   3   4   5   6
`;

// const flipMatrix = (matrix) =>
//     matrix[0].map((column, index) => matrix.map((row) => row[index]));
// const rotateMatrix = (matrix) => flipMatrix(matrix).reverse();
